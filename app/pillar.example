# vi: set ft=yaml:

# To deploy only specific apps add pillar in state.apply like:
# state.apply app.python pillar='{app: {python: {deploy_only: "someapp"}}}'

app:
  pkg: # optional, to install prerequisites
    default-libmysqlclient-dev: any # just make sure version is installed
    python2: latest # always install latest
    libgmp-dev: 2:6.2.0 # install specific version
  #pre_deploy_cmd: # optional
  #  cwd: /root
  #  name: |
  #    /opt/scripts/validate_data.sh
  #post_deploy_cmd: # optional
  #  cwd: /root
  #  name: |
  #    systemctl reload nginx.service
  #python|php-fpm|ruby|static: # choose one of app types
    # only for python
    pyenv: # to include pyenv state
      versions:
        python-3.8.8: True
    # only for php-fpm
    versions: # to include php-fpm state
      7.4:
        modules:
          - php7.4-zip
    # common for all app types
    apps:
      someapp: # you can use __APP_NAME__ to substitute it to the app name in some of values here below
        logrotate: # optional, add custom logrotate config files
          - name: app_logs
            contents: |
              /var/www/__APP_NAME__/app/log/some.log {
                  daily
                  missingok
                  rotate 32
                  compress
                  delaycompress
                  notifempty
                  copytruncate
              }
        # only for python
        virtualenv:
          pyenv_version: 3.8.8
          target: /var/www/__APP_NAME__/app/venv
        # only for php-fpm
        pool:
          #pool_template: salt://app/files/.../pool.conf # optional, by default uses salt://app/files/php-generic/pool.conf
          reload: False # Usually restarting php-fpm on each app is not recommended, but it is ok for one app server setup flow
          log: # optional pool log params
            error_log: /var/www/__APP_NAME__/app/log/php/__APP_NAME__.error.log # by default pool logs are in /var/log/php
            dir_user: __APP_NAME__
            dir_group: __APP_NAME__
            dir_mode: 755
            log_user: __APP_NAME__
            log_group: __APP_NAME__
            log_mode: 644
            rotate_count: 31
            rotate_when: daily
          php_version: 7.4
          config: |
            pm = dynamic
            pm.max_children = 50
            pm.start_servers = 20
            pm.min_spare_servers = 10
            pm.max_spare_servers = 40

            php_admin_flag[html_errors] = off
            php_admin_value[post_max_size] = 25M
            php_admin_value[upload_max_filesize] = 25M
          #pool_contents: | # optional, instead of pool_template+config you can set this pillar for the complete contents
          #  [__APP_NAME__]
          #  user = __APP_NAME__
          #  group = __APP_NAME__
          #  listen = /run/php/php7.4-fpm-__APP_NAME__.sock
          #  listen.owner = www-data
          #  listen.group = www-data
          #  listen.mode = 0660
          #  pm = ondemand
          #  pm.max_children = 50
          #  pm.process_idle_timeout = 10s
          #  pm.max_requests = 500
          #  php_admin_value[error_log] = /var/www/__APP_NAME__/app/log/php/__APP_NAME__.error.log
          #  php_admin_flag[log_errors] = on
          #  php_admin_flag[html_errors] = off
          #  php_admin_value[post_max_size] = 25M
          #  php_admin_value[upload_max_filesize] = 25M
        # only for ruby
        rvm: # install rvm and specific ruby version for app
          version: 3.0.0 
          bundle_install: /var/www/__APP_NAME__/app/src
          #bundle_install_cmd: bundle install --without development test # override default 'bundle install' command
          #gemset: gemset1 # optional, add @gemset1 to some commands, like rvm use {{ app["rvm"]["version"] }}@{{ app["rvm"]["gemset"] }}
          update_bundler: True # optional, update bundler to latest version, default True
        npm: # optional, install per app user
          install:
            - yarn
        puma: # optional, install puma app user level service
          working_directory: /var/www/__APP_NAME__/app/src
          exec_start: /var/www/__APP_NAME__/.rvm/wrappers/ruby-3.0.0/puma -C /var/www/__APP_NAME__/app/src/config/puma.rb
          rails_env: production
          #envs: # optional, additional unit envs
          #  ENV_NAME: env_value
        # common for all app types
        unicorn: # optional, install unicorn app user level service
          working_directory: /var/www/__APP_NAME__/app/src
          exec_start: /var/www/__APP_NAME__/.rvm/wrappers/ruby-3.0.0/unicorn_rails -c /var/www/__APP_NAME__/app/src/config/unicorn.rb -E production -D
          rails_env: production
          #envs: # optional, additional unit envs
          #  ENV_NAME: env_value
        user: __APP_NAME__
        group: __APP_NAME__
        #groups: # optional
        # - docker
        pass: '!'
        #enforce_password: False # optional, do not change pass if it was changed by user
        user_home: /var/www/__APP_NAME__ # optional, but recommended to set each time explicitly, if not set app_root is used
                                         # this is actual linux user home
                                         # useful to set one level higher than app_root to be able to host several apps under one linux user
                                         # or separate app and other files
        app_root: /var/www/__APP_NAME__/app # required, base for relative paths
        #keep_user: True # optional, turns off user management, intended to use with existing user on server
        #app_auth_keys: # optinal, ensure ssh keys for user
        #  - ssh-rsa AAAA...== rsa-key-19700101
        shell: /bin/bash
        #sudo_rules: # optional
        #  __APP_NAME__:
        #    - 'ALL=(ALL) NOPASSWD: /bin/true'
        #  gitlab-runner:
        #    - 'ALL=(ALL) NOPASSWD: /bin/false'
        #ssh_keys: # optional, keys for app .ssh
        #  - file: id_app
        #    priv: |
        #      -----BEGIN OPENSSH PRIVATE KEY-----
        #      ...
        #      -----END OPENSSH PRIVATE KEY-----
        #    pub: ssh-ed25519 AAAAxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx app@example.com
        #ssh_config: | # optional
        #  ...
        source: # optional
          git: git@github.com:myorg/app.git
          #force_reset: False # optional, True by default
          #force_checkout: True # optional, not added by default
          #force_clone: True # optional, not added by default
          target: /var/www/__APP_NAME__/app/src
          rev: master # optional
          branch: master # optional
          #repo_key: | # optional, put key as .ssh/id_repo
          #  -----BEGIN OPENSSH PRIVATE KEY-----
          #  ...
          #  -----END OPENSSH PRIVATE KEY-----
          #repo_key_pub: ssh-ed25519 AAAAxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx app@example.com
          #ssh_config: | # optional, to activate key to repo
          #  Host bitbucket.org
          #    User git
          #    Identityfile ~/.ssh/id_repo
          #extra_opts: # optional, add any opts from https://docs.saltproject.io/en/latest/ref/states/all/salt.states.git.html#salt.states.git.latest
          #  - submodules: True
          #  - fetch_tags: False
          #  - https_user: deploy-user
          #  - https_pass: xx-token-xx
        files: # optional, see https://github.com/microdevops-com/microdevops-formula/tree/master/_include/file_manager
          directory:  # recurse|directory|symlink|managed|absent
            grp_name:
              - name: /var/www/__APP_NAME__/app
          managed: 
            grp_name:
              - name: /var/www/__APP_NAME__/app/file.txt
                source: http://example.com/file.txt
                skip_verify: True
              - name: /var/www/__APP_NAME__/.env
                contents: |
                  VAR1=value
                apply:
                  - env >> /var/www/__APP_NAME__/.env # run as application user
        setup_script_root: # optional
          cwd: /var/www/__APP_NAME__/app/src
          name: |
            set -e
            loginctl enable-linger __APP_NAME__
            loginctl show-user __APP_NAME__
        setup_script_app_user: #optional
          cwd: /var/www/__APP_NAME__/app/src
          name: |
            set -e
            cd src
            ~/venv/bin/python setup.py develop
            cd ..
            mkdir -p ~/.config/systemd/user
            cp -f __APP_NAME__.service ~/.config/systemd/user
            export XDG_RUNTIME_DIR=/run/user/$(id -u __APP_NAME__)
            systemctl --user daemon-reload
            systemctl --user enable --now __APP_NAME__.service
            systemctl --user status __APP_NAME__.service
            # Another example line for ruby
            #source ~/.rvm/scripts/rvm && rvm use 3.0.0 && RAILS_ENV=production rails assets:precompile
        cron: # optional, see https://github.com/microdevops-com/microdevops-formula/tree/master/_include/cron_manager
          present: # can be present, absent, env_present, env_absent
            du-hsc: # create entry in app_user's cron
              name: du -hsc /var/www/__APP_NAME__ >> /tmp/du-hsc-__APP_NAME__
              schedule: "00 * * * *"
            du-hsc-root:  # optionnaly override the user
              name: du -hsc /var/www/ >> /tmp/du-hsc-total
              schedule: "00 * * * *"
              user: root
        nginx: # optional
          domain: example.com
          ssl: # optional
            acme_account: example.com
          #ssl: # standalone cert example
          #  cert: ssl/__APP_NAME__/__APP_NAME__.crt # mandatory, in terms of nginx, e.g. as for files above, or you can use absolute path
          #  key: ssl/__APP_NAME__/__APP_NAME__.key # mandatory
          #  chain: ssl/__APP_NAME__/gd_bundle-g2-g1.crt # optional
          link_sites-enabled: True
          reload: False # Usually restarting nginx on each app is not recommended, but it is ok for one app server setup flow
          auth_basic: # optional basic auth
            #omit_options: True # optionally disable auth for OPTIONS request method
            auth:
              - user: basicuser
                pass: basicpassword
            custom: # optional, manage custom additional htaccess files if needed
              - path: /some/path/__APP_NAME__/dir/.htaccess1
                auth:
                  - user: basicuser
                    pass: basicpassword
          vhost_config: salt://app/files/__APP_NAME__/.../vhost.conf
          #nginx_reload_cmd_prefix: ulimit -n 1000000 # prefix for nginx test and reload commands
          vhost_defaults: # optional, defaults for vhost config template
            php_version: 7.4 # e.g. for php-fpm apps
            key1: value1
            key2: value2
          vhost_defaults_raw: # optional, can pass arbitrary complex data like dicts, lists
            ips: ["1.1.1.1", "1.0.0.1"]
          root: /var/www/__APP_NAME__/app/src/public
          redirects: # optional
            - domain: www.example.com
              vhost_config: salt://app/files/redirect/vhost.conf
              ssl:
                acme_account: example.com
          log: # usually nginx logs are in /var/log/nginx (created by apt), you can have custom dir and logrotate
            access_log: /var/www/__APP_NAME__/app/log/nginx/__APP_NAME__.access.log
            error_log: /var/www/__APP_NAME__/app/log/nginx/__APP_NAME__.error.log
            dir: /var/www/__APP_NAME__/app/log/nginx # required if logs are stored outside of /var/log/nginx, rotation will not work without this
            dir_mode: 755
            log_mode: 640
            dir_user: __APP_NAME__
            dir_group: __APP_NAME__
            log_user: __APP_NAME__
            log_group: __APP_NAME__
            rotate_count: 31
            rotate_when: daily
          #sites_available_dir: /etc/nginx/sites-available # optional default location override
          #sites_enabled_dir: /etc/nginx/sites-enabled # optional default location override
          #vhost_contents: |     # optional, instead of vhost_template you can set this pillar for the complete contents
          #  server {            # please also note that in this case only the __APP_NAME__ variable will be replaced 
          #    listen 443 ssl;
          #    server_name __APP_NAME__.mydomain.tld;
          #    ssl_certificate /etc/letsencrypt/live/__APP_NAME__/fullchain.pem;
          #    ssl_certificate_key /etc/letsencrypt/live/__APP_NAME__/privkey.pem;
          #
          #    return 200 "PONG!";
          #  }

  docker:
    docker-ce_version: 18.06.1 # optional, do not manage docker installation if omitted
    networks:
      proto:
        subnet: 172.18.0.0/24
        gateway: 172.18.0.1
    apps:
      proto:
        image: php:7.3-fpm
        privileged: False # optional, default False
        docker_registry_login:
          username: salt
          password: xxxxxxxxxxxxxxxxxxxx
          registry: gitlab.example.com:5001
        exec_after_deploy: /app/after_deploy.sh
        home: /var/www/proto
        publish:
          - 0.0.0.0:9000:9000/tcp
        environment:
          - APP_ENV: dev
          - APP_DEBUG: 1
          - MYSQL_DB: proto
          - MYSQL_HOST: mysql.example.com
          - MYSQL_PASS: xxxxxxxxxxxxxxxx
          - MYSQL_PORT: 3306
          - MYSQL_USER: proto
        files: # optional, see https://github.com/microdevops-com/microdevops-formula/tree/master/_include/file_manager
          ... # see above
        binds: # optional, see https://docs.saltproject.io/en/latest/ref/states/all/salt.states.docker_container.html#salt.states.docker_container.running, salt has different meaning for binds
          - /var/www/proto/app/data:/app/data:rw
        #volumes: # optional
        #  - ...
        #volumes_from: ... # optional
        networks:
          - proto
        cron: # optional, docker exec ... cmd by cron from docker host
          - cmd: /app/some/command.sh
            minute: ... # optional
            hour: ... # optional 
            daymonth: ... # optional 
            month: ... # optional 
            dayweek: ... # optional 
            special: ... # optional 
        #command: bash # optional, override cmd
      proto-redis:
        image: redis:latest
        home: /var/www/proto-redis
        publish: []
        environment: []
        binds: []
        networks:
          - proto
