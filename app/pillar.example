# vi: set ft=yaml:

# To deploy only specific apps add pillar in state.apply like:
# state.apply app.python pillar='{app: {python: {deploy_only: "someapp"}}}'

app:
  pkg: # optional, to install prerequisites
    default-libmysqlclient-dev: any # just make sure version is installed
    python2: latest # always install latest
    libgmp-dev: 2:6.2.0 # install specific version
  #python|php-fpm|ruby|static: # choose one of app types
    # only for python
    pyenv: # to include pyenv state
      versions:
        python-3.8.8: True
    # only for php-fpm
    versions: # to include php-fpm state
      7.4:
        modules:
          - php7.4-zip
    # common for all app types
    apps:
      someapp: # you can use __APP_NAME__ to substitute to app name in some of values here
        logrotate: # optional, add custom logrotate config files
          - name: app_logs
            contents: |
              /var/www/__APP_NAME__/src/log/*.log {
                  daily
                  missingok
                  rotate 32
                  compress
                  delaycompress
                  notifempty
                  copytruncate
              }
        # only for python
        virtualenv:
          pyenv_version: 3.8.8
          target: /opt/__APP_NAME__/venv
        # only for php-fpm
        pool:
          #pool_template: salt://app/files/.../pool.conf # optional, by default uses salt://app/files/php-generic/pool.conf
          reload: False # Usually restarting php-fpm on each app is not recommended, but it is ok for one app server setup flow
          log: # optional pool log params
            error_log: /var/www/__APP_NAME__/log/php/__APP_NAME__.error.log # by default pool logs are in /var/log/php
            dir_user: someapp
            dir_group: someapp
            dir_mode: 755
            log_user: someapp
            log_group: someapp
            log_mode: 644
            rotate_count: 31
            rotate_when: weekly
          php_version: 7.4
          config: |
            pm = dynamic
            pm.max_children = 50
            pm.start_servers = 20
            pm.min_spare_servers = 10
            pm.max_spare_servers = 40

            php_admin_flag[html_errors] = off
            php_admin_value[post_max_size] = 25M
            php_admin_value[upload_max_filesize] = 25M
          #pool_contents: | # optional, instead of pool_template+config you can set this pillar for the complete contents
          #  [__APP_NAME__]
          #  user = __APP_NAME__
          #  group = __APP_NAME__
          #  listen = /run/php/php7.4-fpm-__APP_NAME__.sock
          #  listen.owner = www-data
          #  listen.group = www-data
          #  listen.mode = 0660
          #  pm = ondemand
          #  pm.max_children = 50
          #  pm.process_idle_timeout = 10s
          #  pm.max_requests = 500
          #  php_admin_value[error_log] = /var/log/php/7.4-fpm/__APP_NAME__.error.log
          #  php_admin_flag[log_errors] = on
          #  php_admin_flag[html_errors] = off
          #  php_admin_value[post_max_size] = 25M
          #  php_admin_value[upload_max_filesize] = 25M
        # only for ruby
        rvm: # install rvm and specific ruby version for app
          version: 3.0.0 
          bundle_install: /var/www/__APP_NAME__/src
          #gemset_create: True #optional
          #bundle_install_cmd: bundle install --without development test # override default 'bundle install' command
          #gemset: gemset1 # optional, add @gemset1 to some commands, like rvm use {{ app["rvm"]["version"] }}@{{ app["rvm"]["gemset"] }}
        npm: # optional, install per app user
          install:
            - yarn
        puma: # optional, install puma app user level service
          working_directory: /var/www/__APP_NAME__/src
          exec_start: /var/www/__APP_NAME__/.rvm/wrappers/ruby-3.0.0/puma -C /var/www/__APP_NAME__/src/config/puma.rb
          rails_env: production
          #envs: # optional, additional unit envs
          #  ENV_NAME: env_value
        # common for all app types
        unicorn: # optional, install unicorn app user level service
          working_directory: /var/www/__APP_NAME__/src
          exec_start: /var/www/__APP_NAME__/.rvm/wrappers/ruby-3.0.0/unicorn_rails -c /var/www/__APP_NAME__/src/config/unicorn.rb -E production -D
          rails_env: production
          #envs: # optional, additional unit envs
          #  ENV_NAME: env_value
        user: __APP_NAME__
        group: __APP_NAME__
        #groups: # optional
        # - docker
        pass: '!'
        #enforce_password: False # optional, do not change pass if it was changed by user
        app_root: /opt/__APP_NAME__ # /var/www/someapp, whatever
        #user_home: /var/www/user # optional, e.g. to host several apps under one user
        #keep_user: True # optional, turns off user management, intended to use with existing user on server
        #app_auth_keys: # optinal, ensure ssh keys for user
        #  - ssh-rsa AAAA...== rsa-key-19700101
        #mkdir: # mkdir -p dirs under app_root, e.g. for certbot
        #  - certbot
        #  - /var/__APP_NAME__/data
        shell: /bin/bash
        #sudo_rules: # optional
        #  __APP_NAME__:
        #    - 'ALL=(ALL) NOPASSWD: /bin/true'
        #  gitlab-runner:
        #    - 'ALL=(ALL) NOPASSWD: /bin/false'
        #ssh_keys: # optional, keys for app .ssh
        #  - file: id_app
        #    priv: |
        #      -----BEGIN OPENSSH PRIVATE KEY-----
        #      ...
        #      -----END OPENSSH PRIVATE KEY-----
        #    pub: ssh-ed25519 AAAAxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx app@example.com
        #ssh_config: | # optional
        #  ...
        source: # optional
          git: git@github.com:myorg/app.git
          #force_reset: False # optional, True by default
          #force_checkout: True # optional, not added by default
          #force_clone: True # optional, not added by default
          target: /opt/__APP_NAME__/src
          rev: master # optional
          branch: master # optional
          #repo_key: | # optional, put key as .ssh/id_repo
          #  -----BEGIN OPENSSH PRIVATE KEY-----
          #  ...
          #  -----END OPENSSH PRIVATE KEY-----
          #repo_key_pub: ssh-ed25519 AAAAxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx app@example.com
          #ssh_config: | # optional, to activate key to repo
          #  Host bitbucket.org
          #    User git
          #    Identityfile ~/.ssh/id_repo
          #extra_opts: # optional, add any opts from https://docs.saltproject.io/en/latest/ref/states/all/salt.states.git.html#salt.states.git.latest
          #  - submodules: True
          #  - fetch_tags: False
          #  - https_user: deploy-user
          #  - https_pass: xx-token-xx
        files: # optional
          src: salt://app/__APP_NAME__
          dst: /opt/__APP_NAME__
        files_source: # optional
          - path: /opt/__APP_NAME__/.file
            mode: 0600
            source: salt://app/.file
        files_contents: # optional
          - path: /opt/__APP_NAME__/.env
            mode: 0600
            contents: |
              export VAR1=value1
        setup_script_root: # optional
          cwd: /opt/__APP_NAME__
          name: |
            set -e
            loginctl enable-linger someapp
            loginctl show-user someapp
        setup_script_app_user: #optional
          cwd: /opt/__APP_NAME__
          name: |
            set -e
            cd src
            ~/venv/bin/python setup.py develop
            cd ..
            mkdir -p ~/.config/systemd/user
            cp -f someapp.service ~/.config/systemd/user
            export XDG_RUNTIME_DIR=/run/user/$(id -u someapp)
            systemctl --user daemon-reload
            systemctl --user enable --now someapp.service
            systemctl --user status someapp.service
            # Another example line for ruby
            #source ~/.rvm/scripts/rvm && rvm use 3.0.0 && RAILS_ENV=production rails assets:precompile
        nginx: # optional
          domain: example.com
          ssl: # optional
            acme_account: example.com
          #ssl: # standalone cert example
          #  cert: ssl/someapp/someapp.crt # mandatory, in terms of nginx, e.g. as for files above, or you can use absolute path
          #  key: ssl/someapp/someapp.key # mandatory
          #  chain: ssl/someapp/gd_bundle-g2-g1.crt # optional
          link_sites-enabled: True
          reload: False # Usually restarting nginx on each app is not recommended, but it is ok for one app server setup flow
          auth_basic: # optional basic auth
            #omit_options: True # optionally disable auth for OPTIONS request method
            auth:
              - user: basicuser
                pass: basicpassword
            custom: # optional, manage custom additional htaccess files if needed
              - path: /some/path/__APP_NAME__/dir/.htaccess1
                auth:
                  - user: basicuser
                    pass: basicpassword
          vhost_config: salt://app/files/__APP_NAME__/.../vhost.conf
          vhost_defaults: # optional, defaults for vhost config template
            php_version: 7.4 # e.g. for php-fpm apps
            key1: value1
            key2: value2
          root: /var/www/__APP_NAME__/src/public
          redirects: # optional
            - domain: www.example.com
              vhost_config: salt://app/files/redirect/vhost.conf
              ssl:
                acme_account: example.com
          log:
            access_log: /var/log/nginx/__APP_NAME__.access.log
            error_log: /var/log/nginx/__APP_NAME__.error.log
            # all below are optional
            dir: /var/www/__APP_NAME__/log/nginx # usually nginx logs are in /var/log/nginx (created by apt), you can have custom dir and logrotate
            dir_mode: 755
            log_mode: 640
            dir_user: root
            dir_group: adm
            log_user: someapp
            log_group: someapp
            rotate_count: 10
            rotate_when: weekly
          #sites_available_dir: /etc/nginx/sites-available
          #sites_enabled_dir: /etc/nginx/sites-enabled

  docker:
    docker-ce_version: 18.06.1
    networks:
      proto:
        subnet: 172.18.0.0/24
        gateway: 172.18.0.1
    apps:
      proto:
        image: php:7.3-fpm
        privileged: False # optional, default False
        docker_registry_login:
          username: salt
          password: xxxxxxxxxxxxxxxxxxxx
          registry: gitlab.example.com:5001
        exec_after_deploy: /app/after_deploy.sh
        home: /var/www/proto
        publish:
          - 0.0.0.0:9000:9000/tcp
        environment:
          - APP_ENV: dev
          - APP_DEBUG: 1
          - MYSQL_DB: proto
          - MYSQL_HOST: mysql.example.com
          - MYSQL_PASS: xxxxxxxxxxxxxxxx
          - MYSQL_PORT: 3306
          - MYSQL_USER: proto
        binds:
          - /var/www/proto/app/data:/app/data:rw
        networks:
          - proto
        cron: # optional, docker exec ... cmd by cron from docker host
          - cmd: /app/some/command.sh
            minute: ... # optional
            hour: ... # optional 
            daymonth: ... # optional 
            month: ... # optional 
            dayweek: ... # optional 
            special: ... # optional 
        #command: bash # optional, override cmd
        #volumes: # optional
        #  - ...
        #volumes_from: ... # optional
      proto-redis:
        image: redis:latest
        home: /var/www/proto-redis
        publish: []
        environment: []
        binds: []
        networks:
          - proto

# legacy
# app: php-fpm, python, static (static pages only, no backend)
app:
  php-fpm_apps|python_apps|static_apps: # fix to a type needed
    app_1:
      enabled: True
      user: app_1
      group: app_1
      pass: '!'
      #enforce_password: False # optional, do not change pass if it was changed by user
      app_root: /var/www/app_1
      #user_home: /var/www/user # optional, e.g. to host several apps under one user
      #keep_user: True # optional, turns off user management. Intended to use with existing user on server
      app_auth_keys: |
        ssh-rsa AAAA...== rsa-key-19700101
      shell: /bin/bash
      nginx:
        link_sites-enabled: True
        reload: False # Usually restarting nginx on each app is not recommended, but it is ok for one app server setup flow
        auth_basic: # optional basic auth
          user: basicuser
          pass: basicpassword
          #omit_options: True # optionally disable auth for OPTIONS request method
        vhost_config: app/example_php-fpm_app_1/vhost.conf
        root: /var/www/app_1/src/public
        server_name: example.com
        server_name_301: www.example.com www2.example.com
        access_log: /var/log/nginx/app_1.access.log
        error_log: /var/log/nginx/app_1.error.log
        log: # optional nginx log extended params, useful with paths other than in /var/log/nginx
          dir: /var/www/app_1/log/nginx # usually nginx logs are in /var/log/nginx (created by apt), you can have custom dir and logrotate
          dir_mode: 755 # default
          log_mode: 640 # default
          dir_user: root # default
          dir_group: adm # default
          log_user: app_1 # -> app:user by default
          log_group: app_1 # -> app:group by default
          rotate_count: 10 # 31 by default
          rotate_when: weekly # daily by default
        ssl: # commercial cert example
          certs_dir: app/example_php-fpm_app_1/ssl # optional, those files will go to /etc/nginx/ssl/app_1 on minion, copy all cert files here and refer them below
          ssl_cert: ssl/app_1/app_1.crt # mandatory, in terms of nginx, e.g. as for files above, or you can use absolute path
          ssl_key: ssl/app_1/app_1.key # mandatory
          ssl_chain: ssl/app_1/gd_bundle-g2-g1.crt # optional
          certbot_for_301: True
          certbot_email: admin@example.com
        #ssl: # certbot example
          #certbot: True
          #certbot_email: admin@example.com
        #ssl: # acme.sh example
          #acme: True
          #acme_account: example
          #acme_run_ready: True
        vhost_defaults:
          key1: value1 # defaults for vhost config template
          key2: value2
      virtualenv: # python_apps only
        pyenv_version: 3.6.7
        target: /opt/alerta/app_1/venv
      pool: # php-fpm_apps only
        pool_config: app/example_php-fpm_app_1/pool.conf
        reload: False # Usually restarting php-fpm on each app is not recommended, but it is ok for one app server setup flow
        log: # optional pool log params
          dir: /var/www/app_1/log/php # by default pool logs are in /var/log/php
          dir_mode: 775 # default
          log_mode: 664 # default
          dir_user: root # default
          dir_group: adm # default
          log_user: app_1 # -> app:user by default
          log_group: app_1 # -> app:group by default
          rotate_count: 10 # 31 by default
          rotate_when: weekly # daily by default
        php_version: 5.6
        pm: |
          pm = dynamic
          pm.max_children = 50
          pm.start_servers = 20
          pm.min_spare_servers = 10
          pm.max_spare_servers = 40
        php_admin: |
          php_admin_flag[html_errors] = off
          php_admin_value[post_max_size] = 25M
          php_admin_value[upload_max_filesize] = 25M
      source:
        enabled: True
        git: ssh://git@bitbucket.org/myorg/app_1
        #force_reset: False # optional, True by default
        #force_checkout: True # optional, not added by default
        #force_clone: True # optional, not added by default
        #hg: ssh://hg@bitbucket.org/myorg/app_1 # do not use simultaneously git and hg
        rev: master # Remote repo branch or revision or tag to clone, like origin/{{ rev }}
        target: /var/www/app_1/src
        branch: master # Local clone branch, HG does not honor 'branch'
        # use ssh-keygen -t ed25519, if possible since this improves readability
        repo_key: |
          -----BEGIN OPENSSH PRIVATE KEY-----
          xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
          ...
          xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx=
          -----END OPENSSH PRIVATE KEY-----
        repo_key_pub: |
          ssh-ed25519 AAAAxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        ssh_config: |
          Host bitbucket.org
            User git
            Identityfile /var/www/app_2/.ssh/id_repo
      files: # you can copy app configs from salt, not to store them in repo
        src: app/example_php-fpm_app_1/files
        dst: /var/www/app_1/src/public
      setup_script: # e.g. after git pull to change permissions and create missing folders
        cwd: /var/www/app_1/src
        name: bash /var/www/app_1/src/etc/setup.sh

