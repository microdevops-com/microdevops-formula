# vi: set ft=yaml:

# app: php-fpm, python, static (static pages only, no backend)
app:
  php-fpm_apps|python_apps|static_apps: # fix to a type needed
    app_1:
      enabled: True
      user: 'app_1'
      group: 'app_1'
      pass: '!'
      #enforce_password: False # optional, do not change pass if it was changed by user
      app_root: '/var/www/app_1'
      #user_home: /var/www/user # optionla, e.g. to host several apps under one user
      app_auth_keys: |
        ssh-rsa AAAA...== rsa-key-19700101
      shell: '/bin/bash'
      nginx:
        link_sites-enabled: True
        reload: False # Usually restarting nginx on each app is not recommended, but it is ok for one app server setup flow
        auth_basic: # optional basic auth
          user: 'basicuser'
          pass: 'basicpassword'
          #omit_options: True # optionally disable auth for OPTIONS request method
        vhost_config: 'app/example_php-fpm_app_1/vhost.conf'
        root: '/var/www/app_1/src/public'
        server_name: 'example.com'
        server_name_301: 'www.example.com www2.example.com'
        access_log: '/var/log/nginx/app_1.access.log'
        error_log: '/var/log/nginx/app_1.error.log'
        log: # optional nginx log extended params, useful with paths other than in /var/log/nginx
          dir: '/var/www/app_1/log/nginx' # usually nginx logs are in /var/log/nginx (created by apt), you can have custom dir and logrotate
          dir_mode: '755' # default
          log_mode: '640' # default
          dir_user: 'root' # default
          dir_group: 'adm' # default
          log_user: 'app_1' # -> app:user by default
          log_group: 'app_1' # -> app:group by default
          rotate_count: '10' # 31 by default
          rotate_when: 'weekly' # daily by default
        ssl: # commercial cert example
          certs_dir: 'app/example_php-fpm_app_1/ssl' # those files will go to /etc/nginx/ssl/app_1 on minion, copy all cert files here and refer them below
          ssl_cert: 'ssl/app_1/app_1.crt' # mandatory, in terms of nginx, e.g. as for files abobe, or you can use absolute path
          ssl_key: 'ssl/app_1/app_1.key' # mandatory
          ssl_chain: 'ssl/app_1/gd_bundle-g2-g1.crt' # mandatory
          certbot_for_301: True
          certbot_email: 'admin@example.com'
        #ssl: # certbot example
          #certbot: True
          #certbot_email: 'admin@example.com'
        #ssl: # acme.sh example
          #acme: True
          #acme_run_ready: True
      virtualenv:
        pyenv_version: '3.6.7'
        target: '/opt/alerta/{{ appname }}/venv'
      pool: # php-fpm_apps only
        pool_config: 'app/example_php-fpm_app_1/pool.conf'
        reload: False # Usually restarting php-fpm on each app is not recommended, but it is ok for one app server setup flow
        log: # optional pool log params
          dir: '/var/www/app_1/log/php' # by default pool logs are in /var/log/php
          dir_mode: '775' # default
          log_mode: '664' # default
          dir_user: 'root' # default
          dir_group: 'adm' # default
          log_user: 'app_1' # -> app:user by default
          log_group: 'app_1' # -> app:group by default
          rotate_count: '10' # 31 by default
          rotate_when: 'weekly' # daily by default
        php_version: '5.6'
        pm: |
          pm = dynamic
          pm.max_children = 50
          pm.start_servers = 20
          pm.min_spare_servers = 10
          pm.max_spare_servers = 40
        php_admin: |
          php_admin_flag[html_errors] = off
          php_admin_value[post_max_size] = 25M
          php_admin_value[upload_max_filesize] = 25M
      source:
        enabled: True
        git: 'ssh://git@bitbucket.org/myorg/app_1'
        #hg: 'ssh://hg@bitbucket.org/myorg/app_1' # do not use simultaneously git and hg
        rev: 'master' # Remote repo branch or revision or tag to clone, like origin/{{ rev }}
        target: '/var/www/app_1/src'
        branch: 'master' # Local clone branch, HG does not honor 'branch'
        # use ssh-keygen -t ed25519, if possible since this improves readability
        repo_key: |
          -----BEGIN OPENSSH PRIVATE KEY-----
          xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
          ...
          xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx=
          -----END OPENSSH PRIVATE KEY-----
        repo_key_pub: |
          ssh-ed25519 AAAAxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        ssh_config: |
          Host bitbucket.org
            User git
            Identityfile /var/www/app_2/.ssh/id_repo
      files: # you can copy app configs from salt, not to store them in repo
        src: 'app/example_php-fpm_app_1/files'
        dst: '/var/www/app_1/src/public'
      setup_script: # e.g. after git pull to change permissions and create missing folders
        cwd: '/var/www/app_1/src'
        name: 'bash /var/www/app_1/src/etc/setup.sh'

app:
  docker:
    docker-ce_version: 18.06.1
    networks:
      - name: proto
        subnet: 172.18.0.0/24
        gateway: 172.18.0.1
    apps:
      proto:
        image: php:7.3-fpm
        privileged: False # optional, default False
        docker_registry_login:
          username: salt
          password: xxxxxxxxxxxxxxxxxxxx
          registry: gitlab.example.com:5001
        exec_after_deploy: /app/after_deploy.sh
        home: /var/www/proto
        publish:
          - 0.0.0.0:9000:9000/tcp
        environment:
          - APP_ENV: dev
          - APP_DEBUG: 1
          - MYSQL_DB: proto
          - MYSQL_HOST: mysql.example.com
          - MYSQL_PASS: xxxxxxxxxxxxxxxx
          - MYSQL_PORT: 3306
          - MYSQL_USER: proto
        binds:
          - /var/www/proto/app/data:/app/data:rw
        networks:
          - proto
        cron: # optional, docker exec ... cmd by cron from docker host
          - cmd: /app/some/command.sh
            minute: '...' # optional
            hour: '...' # optional 
            daymonth: '...' # optional 
            month: '...' # optional 
            dayweek: '...' # optional 
            special: '...' # optional 
      proto-redis:
        image: redis:latest
        home: /var/www/proto-redis
        publish: []
        environment: []
        binds: []
        networks:
          - proto
